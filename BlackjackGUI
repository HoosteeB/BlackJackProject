
import java.awt.*;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Stack;

public class BlackjackGUI {
	public static final int FRAME_WIDTH = 800;
	public static final int FRAME_HEIGHT = 600;

	public static void main(String[] args) {
		new BlackjackGUI();
	}

	public BlackjackGUI() {
		// JFrame configuration
		Stack<String> newCards = new Stack<String>();
		shuffle(newCards);
		
		try {
			JFrame frame = new JFrame("Blackjack");
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			frame.setSize(new Dimension(FRAME_WIDTH, FRAME_HEIGHT));
			frame.setTitle("Blackjack");
			frame.setLocationRelativeTo(null);
			
			///////////////////////////////////////////////////////////////////////////////////
			// get a screen size and put a frame on the center of screen
			Dimension screenSize = new Dimension(Toolkit.getDefaultToolkit().getScreenSize());
			frame.setLocation(new Point((int) (screenSize.width / 2.0), (int) (screenSize.height / 2.0)));
			///////////////////////////////////////////////////////////////////////////////////

			frame.setLayout(new BorderLayout());


			///////////////////////////////////////////////////////////////////////////////////////
			JPanel north = new JPanel(new FlowLayout());
			north.setPreferredSize(new Dimension (40,250));
			north.setBackground(new Color(0,153,0));
			
			String firstCard = newCards.pop();
			BufferedImage img = ImageIO.read(new File("BacksideOfCard.png"));
			JLabel pic = new JLabel(new ImageIcon(img));
			int CardValue = cardValue(firstCard);
			
			String secondCard = newCards.pop();
			BufferedImage img2 = ImageIO.read(new File(firstCard));
			JLabel pic2 = new JLabel(new ImageIcon(img2));
			int CardValue2 = cardValue(secondCard);
			
			//pic is put right of the pic2
			north.add(pic2);
			north.add(pic);
			

			frame.add(north, BorderLayout.NORTH);
			//////////////////////////////////////////////////////////////////////////////////////
			JPanel center = new JPanel(new FlowLayout());
			center.setBackground(new Color(0,153,0));
			
			String thirdCard = newCards.pop();
			BufferedImage img3 = ImageIO.read(new File(newCards.pop()));
			JLabel pic3 = new JLabel(new ImageIcon(img3));
			int CardValue3 = cardValue(thirdCard);
			
			String fourthCard = newCards.pop();
			BufferedImage img4 = ImageIO.read(new File(newCards.pop()));
			JLabel pic4 = new JLabel(new ImageIcon(img4));
			int CardValue4 = cardValue(fourthCard);
			
		
			center.add(pic4);
			center.add(pic3);
			

			frame.add(center, BorderLayout.CENTER);
			////////////////////////////////////////////////////////////////////////////////////////
			JPanel south = new JPanel(new FlowLayout());
			south.setPreferredSize(new Dimension (40,45));
			south.setBackground(new Color(0,100,0));
			
				JButton Hit = new JButton();
				Hit.setFont(new Font("Plain", Font.BOLD, 20));
				Hit.setText("Hit");
				Hit.setBackground(Color.WHITE);
				
				JButton Double = new JButton();
				Double.setFont(new Font("Plain", Font.BOLD, 20));
				Double.setText("Double");
				Double.setBackground(Color.WHITE);
				
				JButton Stand = new JButton();
				Stand.setFont(new Font("Plain", Font.BOLD, 20));
				Stand.setText("Stand");
				Stand.setBackground(Color.WHITE);


			south.add(Hit);
			south.add(Double);
			south.add(Stand);
			
			
			//south.addActionListener();

			
			/*center.add(new JLabel("Bet Amount: "));
			center.add(new JTextField("Place your bets!")); */
			
			frame.add(south, BorderLayout.SOUTH);
			

			// frame.add();

			frame.setVisible(true);
		} 
		catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void shuffle(Stack<String> newCards) {
		ArrayList<String> cards = new ArrayList<String>();
		cards.addAll(Arrays.asList("2OfSpades.png", "3OfSpades.png", "4OfSpades.png", "5OfSpades.png", "6OfSpades.png", "7OfSpades.png", "8OfSpades.png", "9OfSpades.png", "10OfSpades.png", "JackOfSpades.png", "KingOfSpades.png", "QueenOfSpades.png", "AceOfSpades.png",
				"2OfHearts.png", "3OfHearts.png", "4OfHearts.png", "5OfHearts.png", "6OfHearts.png", "7OfHearts.png", "8OfHearts.png", "9OfHearts.png", "10OfHearts.png", "JackOfHearts.png", "KingOfHearts.png", "QueenOfHearts.png", "AceOfHearts.png", 
				"2OfDiamonds.png", "3OfDiamonds.png", "4OfDiamonds.png", "5OfDiamonds.png", "6OfDiamonds.png", "7OfDiamonds.png", "8OfDiamonds.png", "9OfDiamonds.png", "10OfDiamonds.png", "JackOfDiamonds.png", "KingOfDiamonds.png", "QueenOfDiamonds.png", "AceOfDiamonds.png", 
				"2OfClubs.png", "3OfClubs.png", "4OfClubs.png", "5OfClubs.png", "6OfClubs.png", "7OfClubs.png", "8OfClubs.png", "9OfClubs.png", "10OfClubs.png", "JackOfClubs.png", "KingOfClubs.png", "QueenOfClubs.png", "AceOfClubs.png"));
		Collections.shuffle(cards);

		for (String c: cards) {
			newCards.push(c);
		}
		
		
	}
	public static int cardValue(String Card) {
		if(Card.equals("2OfSpades.png") || Card.equals("2OfHearts.png") || Card.equals("2OfClubs.png") || Card.equals("2OfDiamonds.png")) {
			return 2;
		} else if(Card.equals("3OfSpades.png") || Card.equals("3OfHearts.png") || Card.equals("3OfClubs.png") || Card.equals("3OfDiamonds.png")) {
			return 3;
		} else if(Card.equals("4OfSpades.png") || Card.equals("4OfHearts.png") || Card.equals("4OfClubs.png") || Card.equals("4OfDiamonds.png")) {
			return 4;
		} else if(Card.equals("5OfSpades.png") || Card.equals("5OfHearts.png") || Card.equals("5OfClubs.png") || Card.equals("5OfDiamonds.png")) {
			return 5;
		} else if(Card.equals("6OfSpades.png") || Card.equals("6OfHearts.png") || Card.equals("6OfClubs.png") || Card.equals("6OfDiamonds.png")) {
			return 6;
		} else if(Card.equals("7OfSpades.png") || Card.equals("7OfHearts.png") || Card.equals("7OfClubs.png") || Card.equals("7OfDiamonds.png")) {
			return 7;
		} else if(Card.equals("8OfSpades.png") || Card.equals("8OfHearts.png") || Card.equals("8OfClubs.png") || Card.equals("8OfDiamonds.png")) {
			return 10;
		} else if(Card.equals("9OfSpades.png") || Card.equals("9OfHearts.png") || Card.equals("9OfClubs.png") || Card.equals("9OfDiamonds.png")) {
			return 10;
		} else if(Card.equals("10OfSpades.png") || Card.equals("10OfHearts.png") || Card.equals("10OfClubs.png") || Card.equals("10OfDiamonds.png")) {
			return 10;
		} else if(Card.equals("JackOfSpades.png") || Card.equals("JackOfHearts.png") || Card.equals("JackOfClubs.png") || Card.equals("JackOfDiamonds.png")) {
			return 10;
		} else if(Card.equals("QueenOfSpades.png") || Card.equals("QueenOfHearts.png") || Card.equals("QueenOfClubs.png") || Card.equals("QueenOfDiamonds.png")) {
			return 10;
		} else if(Card.equals("KingOfSpades.png") || Card.equals("KingOfHearts.png") || Card.equals("KingOfClubs.png") || Card.equals("KingOfDiamonds.png")) {
			return 10;
		} else {
			return 11;
		}
		
	}

}
